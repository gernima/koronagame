import telebot
import time
from telebot import types
from threading import Thread
import pymorphy2
import sqlite3

bot = telebot.TeleBot('1077053623:AAE8yg9jrRas7h7mTgKaNQAjOTeIsgwJHGI')
print('start')

a = {1: {'chat_id': 0, 'inventory': [], 'name': 'a', 'mom': True, 'dad': False, 'brother': True, 'sister': False,
         'immunity': 5}}


def save_and_update(chat_id, a):
    con = sqlite3.connect("bd.db")
    cur = con.cursor()
    a['inventory'] = ' '.join(a['inventory'])
    a = list(a[chat_id].values())
    if cur.execute("""Select chat_id from saves where chat_id == {}""".format(a[0])).fetchone():
        cur.execute(
            """UPDATE saves SET chat_id = ?, inventory = ?, name = ?, mom = ?, dad = ?, brother = ?, sister = ?, immunity = ? WHERE chat_id == ?""",
            (a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[0]))
    else:
        cur.execute("""INSERT INTO saves VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                    (a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]))
    con.commit()
    con.close()


def items():
    murkup = types.InlineKeyboardMarkup(row_width=2)
    item_1 = types.InlineKeyboardButton(text='', callback_data='item_')
    murkup.add(
        types.InlineKeyboardButton(text='–≤–æ–¥–∫–∞ - 1', callback_data='item_vodka'),
        types.InlineKeyboardButton(text='–∫–æ–ª–±–∞—Å–∞ - 3', callback_data='item_sausage'),
        types.InlineKeyboardButton(text='–∞–ø—Ç–µ—á–∫–∞ - 3', callback_data='item_medicinechest'),
        types.InlineKeyboardButton(text='–º—ã–ª–æ - 3', callback_data='item_soap'),
        types.InlineKeyboardButton(text='–º–∞—Å–∫–∞ - 3', callback_data='item_mask')
    )
    return murkup


def time_(call):
    second = 60
    sms = bot.send_message(call.message.chat.id, '–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} {} –∏ {} –µ–Ω–µ—Ä–≥–∏–∏'.format(
            second, morph('—Å–µ–∫—É–Ω–¥–∞')[0].make_agree_with_number(second).word, weight), reply_markup=items())
    while second != 0:
        if weight == 0:
            bot.delete_message(chat_id=sms.chat.id,  message_id=sms.message_id)
            return
        time.sleep(1)
        second -= 1
        bot.edit_message_text(chat_id=sms.chat.id, message_id=sms.message_id,
            text='–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} {}  –∏ {} –µ–Ω–µ—Ä–≥–∏–∏'.format(
                second, morph('—Å–µ–∫—É–Ω–¥–∞')[0].make_agree_with_number(second).word, weight), reply_markup=items())
    bot.edit_message_text(chat_id=sms.chat.id, message_id=sms.message_id, text='–í—Ä–µ–º—è –≤—ã—à–ª–æ')
    print(package)
    #  save BD package


def bunker(message):
    bot.send_message(message.chat.id, 'üòïüòåü§®üòî', reply_markup=bunker1)


morph = pymorphy2.MorphAnalyzer().parse
FOOD = {'vodka': ('–≤–æ–¥–∫–∞', 1), 'mask': ('–º–∞—Å–∫–∞', 3), 'medicinechest': ('–∞–ø—Ç–µ—á–∫–∞', 3), 'soap': ('–º—ã–ª–æ', 3), 'sausage': ('–∫–æ–ª–±–∞—Å–∞', 3)}
package = {}
weight = 10
user_list = []
time_list = {}
bunker1 = telebot.types.InlineKeyboardMarkup(row_width=5)
bunker1.add(telebot.types.InlineKeyboardButton(text='–ü–∞–ø–∞', callback_data='bunker_dad'),
            telebot.types.InlineKeyboardButton(text='–ú–∞–º–∞', callback_data='bunker_mother'),
            telebot.types.InlineKeyboardButton(text='–ë—Ä–∞—Ç', callback_data='bunker_brother'),
            telebot.types.InlineKeyboardButton(text='–°–µ—Å—Ç—Ä–∞', callback_data='bunker_sister'))
bunker1.add(telebot.types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –ø—É—Å—Ç–æ—à—å', callback_data='bunker_wasteland'))
bunker1.add(telebot.types.InlineKeyboardButton(text='–ñ—É—Ä–Ω–∞–ª', callback_data='bunker_journal'))


@bot.message_handler(commands=['start'])
def start_message(message):
    laste_name = message.from_user.last_name
    if not laste_name:
        laste_name = ''
    name = message.from_user.first_name + ' ' + laste_name
    murkup = types.InlineKeyboardMarkup(row_width=2)
    item_1 = types.InlineKeyboardButton('–î–∞', callback_data='play_yes')
    item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='play_no')
    murkup.add(item_1, item_2)
    bot.send_message(message.chat.id, '{}, —Ç—ã –≤—ã–∂–∏–ª?\n–†–µ—à–∏—à—å—Å—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É?'.format(name), reply_markup=murkup)
    user_list.append(message.from_user.username)
    print(user_list)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global weight
    user = call.from_user.username
    name = call.data
    name_type = name.split('_')[0]
    if name_type == 'play':
        type = name.split('_')[1]
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception as e:
            print(e, call.message.chat.id, call.message.message_id)
        if type == 'yes':
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–°–ø—è—Ä—Ç–∞—Ç—å—Å—è', callback_data='play_start'),
                       types.InlineKeyboardButton(text='–°–¥–∞—Ç—å—Å—è', callback_data='play_end'))
            bot.send_message(call.message.chat.id, '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –≤—ã–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ, –∫–æ—Ç–æ—Ä–æ–º—É –≥—Ä–æ–∑–∏—Ç –ø–∞–Ω–¥–µ–º–∏—è, –≤—ã —Ä–µ—à–∞–µ—Ç–µ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ –±—É–Ω–∫–µ—Ä–µ, —É —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤–µ—â–∏ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏–µ–¥–µ—Ç –ø–æ–ª–∏—Ü–∏—è –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=markup)
        elif type == 'no':
            murkup = types.InlineKeyboardMarkup(row_width=2)
            item_1 = types.InlineKeyboardButton('–î–∞', callback_data='play_yes')
            item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='play_no')
            murkup.add(item_1, item_2)
            bot.send_message(call.message.chat.id, '–°—ã–∫–∞–Ω—É–ª, –º–æ–∂–µ—Ç –≤—Å–µ —Ç–∞–∫–∏ —Å—ã–≥—Ä–∞–µ—à—å?',
                             reply_markup=murkup)
        elif type == 'start':
            print('–°—á–µ—Ç—á–∏–∫: ' + call.from_user.username)
            thread1 = Thread(target=time_, args=(call,))
            thread1.start()
            time_list[call.from_user.username] = thread1
        elif type == 'end':
            bot.send_message(call.message.chat.id, '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ, –Ω–æ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –≤—ã —É–∂–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–∑–∏–ª–∏—Å—å –≤ –æ–±—â–µ–π –±–æ–ª—å–Ω–∏—Ü–µ, –∞ –≤–µ–¥—å –º–æ–≥–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å –∏ –≤—ã–∂–∏—Ç—å')
    elif name_type == 'item':
        item = name.split('_')[1]
        if weight != 0:
            if weight - FOOD[item][1] < 0:
                bot.answer_callback_query(callback_query_id=call.id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏')
            else:
                package[call.from_user.username] = package.get(call.from_user.username, []) + [FOOD[item][0]]
                weight -= FOOD[item][1]
                if weight == 0:
                    bot.send_message(call.message.chat.id, '–°—É–º–∫–∞ —Å–æ–±—Ä–∞–Ω–∞:\n' + '\n'.join('{}. {}'.format(i + 1, item) for i, item in enumerate(package[user])))
                    bot.send_message(call.message.chat.id, '–ü–æ—Ä–∞ –≤ –±—É–Ω–∫–µ—Ä')
                    bunker(call.message)
                bot.answer_callback_query(callback_query_id=call.id, text='–ú—ã –ø–æ–ª–æ–∂–∏–ª–∏ –≤ —Å—É–º–∫—É: {}'.format(morph(FOOD[item][0])[0].inflect({'accs'}).word))


try:
    bot.polling()
except Exception as e:
    bot.polling()
    print(e)