import telebot
import time
from telebot import types
from threading import Thread, Lock
import pymorphy2
import sqlite3
from random import choice, sample
from event import events

print('start')
bot = telebot.TeleBot('1077053623:AAE8yg9jrRas7h7mTgKaNQAjOTeIsgwJHGI')
lock = Lock()
a = {0: {'inventory': {}, 'name': 'a', 'mother': 0, 'dad': 0, 'brother': 0, 'sister': 0, 'day': 1,
         'dad_bd': {'hp': 50, 'hungry': 50, 'water': 50, 'immunity': 50, 'emoji': 'üòï', 'weapon': ''},
         'mother_bd': {'hp': 50, 'hungry': 50, 'water': 50, 'immunity': 50, 'emoji': 'üòå', 'weapon': ''},
         'brother_bd': {'hp': 50, 'hungry': 50, 'water': 50, 'immunity': 50, 'emoji': 'ü§®', 'weapon': ''},
         'sister_bd': {'hp': 50, 'hungry': 50, 'water': 50, 'immunity': 50, 'emoji': 'üòî', 'weapon': ''}}}
con = sqlite3.connect("bd.db", check_same_thread=False)
cur = con.cursor()
slice_page = 20
time_list = {}
family = {}
user_list = []
weight_list = {}
wasteland_page = {}  # chat_id: num_page
morph = pymorphy2.MorphAnalyzer().parse
WEAPON_DAMAGE = {'obrez': 1}  # name: damage
FOOD = {'dad': ('–ü–∞–ø–∞', 'dad', 15, 1),  # (rus_name, en_name, weight, n)
        'sister': ('–°–µ—Å—Ç—Ä–∞', 'sister', 15, 1),
        'mother': ('–ú–∞–º–∞', 'mother', 15, 1),
        'brother': ('–ë—Ä–∞—Ç', 'brother', 15, 1),
        'mask': ('–º–∞—Å–∫–∞', 'mask', 3, 1),
        'medicinechest': ('–∞–ø—Ç–µ—á–∫–∞', 'medicinechest', 3, 1),
        'soap': ('–º—ã–ª–æ', 'soap', 3, 4),
        'obrez': ('–æ–±—Ä–µ–∑', 'obrez', 50, 1),
        'cannedfood': ('–∫–æ–Ω—Å–µ—Ä–≤—ã', 'cannedfood', 3, 6, 50),
        'water': ('–≤–æ–¥–∞', 'water', 2, 6, 50)}
package = {}
things = {'dad': ('–ü–∞–ø–∞', 'dad', 15, 1),  # (rus_name, en_name, weight, n, +char)
        'sister': ('–°–µ—Å—Ç—Ä–∞', 'sister', 15, 1),
        'mother': ('–ú–∞–º–∞', 'mother', 15, 1),
        'brother': ('–ë—Ä–∞—Ç', 'brother', 15, 1),
        'mask': ('–º–∞—Å–∫–∞', 'mask', 3, 1),
        'medicinechest': ('–∞–ø—Ç–µ—á–∫–∞', 'medicinechest', 3, 1),
        'soap': ('–º—ã–ª–æ', 'soap', 3, 4),
        'obrez': ('–æ–±—Ä–µ–∑', 'obrez', 50, 1),
        'cannedfood': ('–∫–æ–Ω—Å–µ—Ä–≤—ã', 'cannedfood', 3, 6, 50),
        'water': ('–≤–æ–¥–∞', 'water', 2, 6, 50),
        'vaccine': ('–≤–∞–∫—Ü–∏–Ω–∞', 'vaccine', 2, 6, 50)}
wasteland_return = types.InlineKeyboardMarkup()
wasteland_return.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='wasteland_return'))

wasteland_return_from_inventory = types.InlineKeyboardMarkup()
wasteland_return_from_inventory.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='wasteland_return_from_inv'))


@bot.callback_query_handler(func=lambda call: 'bunker' in call.data and 'wasteland_return' not in call.data)
def bunker_logic(call):
    if call.data == 'bunker_family_dad':
        edit_message_for_family(call)
    elif call.data == 'bunker_family_mother':
        edit_message_for_family(call)
    elif call.data == 'bunker_family_sister':
        edit_message_for_family(call)
    elif call.data == 'bunker_family_brother':
        edit_message_for_family(call)
    elif call.data == 'bunker_wasteland':
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text='–õ—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏:',
                              reply_markup=get_wasteland_mans_keyboard(call.from_user.id))
    elif 'bunker_weapon_' in call.data:
        splited_data = call.data.split('_')
        who = splited_data[2]
        weapon = splited_data[3]
        if weapon == 'none':
            a[call.from_user.id]['inventory'][a[call.from_user.id][who + '_bd']['weapon']] += 1
            a[call.from_user.id][who + '_bd']['weapon'] = ''
        else:
            prev_weapon = a[call.from_user.id][who + '_bd']['weapon']
            if prev_weapon != '' and prev_weapon:
                if a[call.from_user.id]['inventory'][prev_weapon]:
                    a[call.from_user.id]['inventory'][prev_weapon] += 1
                else:
                    a[call.from_user.id]['inventory'][prev_weapon] = 1
            if a[call.from_user.id]['inventory'][weapon] and a[call.from_user.id]['inventory'][weapon] - 1 > 0:
                a[call.from_user.id]['inventory'][weapon] -= 1
            else:
                del a[call.from_user.id]['inventory'][weapon]
            a[call.from_user.id][who + '_bd']['weapon'] = weapon
        cur.execute(f"""UPDATE {who} SET weapon='{a[call.from_user.id][who + '_bd']['weapon']}' where chat_id={call.from_user.id}""")
        edit_message_for_family(call, who)
        con.commit()
    elif 'weapon' in call.data:
        who = call.data.split('_')[3]
        weapons_menu = telebot.types.InlineKeyboardMarkup(row_width=3)
        weapons_menu.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='bunker_family_return'))
        weapons_menu.add(telebot.types.InlineKeyboardButton(text=f'–£–±—Ä–∞—Ç—å –æ—Ä—É–∂–∏–µ',
                                                            callback_data=f'bunker_weapon_{who}_none'))
        butts = []
        for item in a[call.from_user.id]['inventory'].keys():
            if item in WEAPON_DAMAGE.keys():
                butts.append(telebot.types.InlineKeyboardButton(text=f'{things[item][0]}-‚öî{WEAPON_DAMAGE[item]}', callback_data=f'bunker_weapon_{who}_{item}'))
        for i in range(0, len(butts), 3):
            if len(butts) - i >= 3:
                weapons_menu.add(butts[i], butts[i + 1], butts[i + 2])
            elif len(butts) - i >= 2:
                weapons_menu.add(butts[i], butts[i + 1])
            else:
                weapons_menu.add(butts[i])
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤–æ–æ—Ä—É–∂–∏—Ç—å:',
                              reply_markup=weapons_menu)
    elif call.data == 'bunker_inventory':
        send_inventory(call, wasteland_return)
    elif call.data == 'bunker_family_return':
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[call.from_user.id]["day"]}',
                              reply_markup=get_bunker_keyboard(call.from_user.id))
    elif 'bunker_next_day' in call.data:
        try:
            lock.acquire(True)
            add_wasteland_event(2, call.from_user.id)
            a[call.from_user.id]['day'] += 1
            save_update_to_bd(call.from_user.id)
            if 'wasteland' in call.data:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                      text=f'–õ—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏ ',
                                      reply_markup=get_wasteland_mans_keyboard(call.from_user.id))
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                      text=f'–õ—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏:',
                                      reply_markup=get_wasteland_mans_keyboard(call.from_user.id))
            else:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                      text=f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[call.from_user.id]["day"]}',
                                      reply_markup=get_bunker_keyboard(call.from_user.id))
        finally:
            lock.release()
    elif call.data == 'bunker_family_feed':
        name = call.message.text.split("\n")[0]
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=water_and_canned(call, name))
    elif 'food' in call.data:
        name_ = call.data.split('_')[-1]
        name = ''
        if '–ü–∞–ø–∞' in name_:
            name = 'dad_bd'
        elif '–ú–∞–º–∞' in name_:
            name = 'mother_bd'
        elif '–ë—Ä–∞—Ç' in name_:
            name = 'brother_bd'
        elif '–°–µ—Å—Ç—Ä–∞' in name_:
            name = 'sister_bd'
        if 'cannedfood' in call.data:
            if a[call.message.chat.id][name]['hungry'] <= 90 and a[call.from_user.id]["inventory"].get("cannedfood", 0) > 0:
                a[call.message.chat.id][name]['hungry'] += 10
                a[call.from_user.id]["inventory"]["cannedfood"] -= 1
                item_zero(call.message, "cannedfood")
            else:
                return
        else:
            if a[call.message.chat.id][name]['water'] <= 90 and a[call.from_user.id]["inventory"].get("water", 0) > 0:
                a[call.message.chat.id][name]['water'] += 10
            else:
                return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'{name_}'
                              f'\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {a[call.from_user.id][name]["hp"]}'
                              f'\n–°—ã—Ç–æ—Å—Ç—å: {a[call.from_user.id][name]["hungry"]}'
                              f'\n–ñ–∞–∂–¥–∞: {a[call.from_user.id][name]["water"]}'
                              f'\n–ò–º–º—É–Ω–∏—Ç–µ—Ç: {a[call.from_user.id][name]["immunity"]}',
                              reply_markup=water_and_canned(call, name_))
    elif call.data == 'bunker_journal':
        event_run(call.message)


def send_inventory(call, keyboard, is_wasteland_inv=False, who=''):
    if is_wasteland_inv:
        bd_inv = cur.execute("""Select items from wasteland where who='{}' and chat_id={}""".format(who, call.from_user.id)).fetchone()[0].split(';')
        inv = {}
        if len(bd_inv) > 0 and bd_inv[0] != '':
            for i in [x.split(':') for x in bd_inv]:
                inv[i[0]] = int(i[1])
        inv_items = "\n".join([f"{things[x][0]}: {inv[x]}" for x in
                               inv.keys()])
    else:
        inv_items = "\n".join([f"{things[x][0]}: {a[call.from_user.id]['inventory'][x]}" for x in a[call.from_user.id]["inventory"].keys()])
    if not a[call.from_user.id]["inventory"].keys():
        inv_items = '–ü—É—Å—Ç–æ'
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                          text=f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n{inv_items}',
                          reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'event' in call.data)
def event_logic(call):
    text = call.data.split('_')
    event, button = text[1], ''.join(text[2:])
    chat_id = call.message.chat.id
    family = [i for i in ['mother', 'dad', 'brother', 'sister'] if a[chat_id][i] != 0]
    if event == 'spider':
        people = choice(family)
        people_immunity = a[chat_id][people + '_bd']['immunity']
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='wasteland_return'))
        if button == 'continue':
            for i in family:
                a[chat_id][i + '_bd']['immunity'] = max(a[chat_id][i + '_bd']['immunity'] - 20, 0)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                text='–ù–µ –Ω–∞–¥–æ –±—ã–ª–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É, –≤—Å–µ —á–ª–µ–Ω—ã —Å–µ–º—å–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ '
                '—Ä–∞—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∞ —Ç–∞–∫ –∂–µ –∏—Ö –ø–æ–∫—É—Å–∞–ª–∏ –ø–∞—É–∫–∏, –ø–∞–¥–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ —É –≤—Å–µ–π —Å–µ–º—å–∏', reply_markup=markup)
        elif button == 'medicinechest':
            a[call.message.chat.id]['inventory']['medicinechest'] -= 1
            item_zero(call.message, 'medicinechest')
            a[chat_id][people + '_bd']['immunity'] = min(people_immunity + 10, 100)
            people = morph(FOOD[people][0])[0].inflect({"gent"}).word
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–∞—É–∫–∏ –±—ã–ª–∏ –≤—ã–º–µ—à–ª–µ–Ω–Ω—ã–µ, –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∏ –∏ –≤—Å–µ'
                                                   f' –ø—Ä–æ—à–ª–æ, –∞ —É {people} –ø—Ä–æ—à–ª–∞ —Å—Ç–∞—Ä–∞—è –±–æ–ª–µ–∑–Ω—å', reply_markup=markup)
        elif button == 'war':
            a[chat_id][people + '_bd']['immunity'] = max(people_immunity - 5, 0)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –æ—Ç–±–∏–ª–∏—Å—å –æ—Ç –ø–∞—É–∫–æ–≤, –Ω–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —É–∫—É—Å–∏–ª {FOOD[people][0]}', reply_markup=markup)
    else:
        if text[2] in str(cur.execute("""Select activ_butts from events where event_id={}""".format(event)).fetchone()[0]).split(';'):
            x = cur.execute("""Select hp_plus, immunity_plus from events where event_id={}""".format(event)).fetchall()[0]
            sum_damage = 0
            for who in ['dad', 'mother', 'sister', 'brother']:
                if a[chat_id][who]:
                    who_weapon = cur.execute("""Select weapon from {} where chat_id={}""".format(who, chat_id)).fetchone()
                    if who_weapon in WEAPON_DAMAGE.keys():
                        sum_damage += WEAPON_DAMAGE[who_weapon[0]]
            need_weapon_damage = cur.execute(
                """Select need_weapon_damage from events where event_id={}""".format(event)).fetchone()[0]
            if not need_weapon_damage or need_weapon_damage == '' or need_weapon_damage == 'None':
                need_weapon_damage = 0
            if sum_damage >= int(need_weapon_damage):
                whos = cur.execute("""Select who from events where event_id={}""".format(event)).fetchone()[0].split(';')
                for who in whos:
                    minus_char(chat_id, who, x)
                res_items = items_plus_and_minus(event, a[chat_id]['inventory'], items_minus_tf=False, bd_name='events')
                a[chat_id]['inventory'] = res_items
            else:
                events_debuff(chat_id, event)
        else:
            events_debuff(chat_id, event)
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[call.from_user.id]["day"]}',
                              reply_markup=get_bunker_keyboard(call.from_user.id))


def minus_char(chat_id, who, x):
    if x[0]:
        if int(x[0]) > 0:
            a[chat_id][who + '_bd']['hp'] += max(a[chat_id][who + '_bd']['hp'] + int(x[0]), 100)
        else:
            a[chat_id][who + '_bd']['hp'] += max(a[chat_id][who + '_bd']['hp'] - int(x[0]), 0)
    if x[1]:
        if int(x[1]) > 0:
            a[chat_id][who + '_bd']['immunity'] += min(a[chat_id][who + '_bd']['immunity'] + int(x[1]), 100)
        else:
            a[chat_id][who + '_bd']['immunity'] += min(a[chat_id][who + '_bd']['immunity'] - int(x[1]), 0)


def events_debuff(chat_id, event):
    x = cur.execute("""Select hp_minus, immunity_minus from events where event_id={}""".format(event)).fetchall()[0]
    whos = str(cur.execute("""Select who from events where event_id={}""".format(event)).fetchone()[0]).split(';')
    if len(list(whos)) != 0 and whos[0] != 'None' and whos[0].strip() != '':
        for who in whos:
            if a[chat_id][who + '_bd']:
                minus_char(chat_id, who, x)
    a[chat_id]['inventory'] = items_plus_and_minus(event, a[chat_id]['inventory'], items_plus_tf=False, bd_name='events')


@bot.callback_query_handler(func=lambda call: 'wasteland' in call.data)
def wasteland_logic(call):
    if 'go' in call.data:
        who = call.data.split('_')[1]
        a[call.from_user.id][who] = 0
        cur.execute("""INSERT INTO wasteland VALUES (?, ?, ?, ?, ?, ?, ?)""",
                    (call.from_user.id, who, '–î–µ–Ω—å 1: –Ø –≤ –ø—É—Å—Ç–æ—à–∏;', 1, False, 0, ''))
        con.commit()
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[call.from_user.id]["day"]}',
                              reply_markup=get_bunker_keyboard(call.from_user.id))
    else:
        splited_data = call.data.split('_')
        chat_id = call.from_user.id
        if call.data == 'wasteland_return':
            if 'inv' in call.data:
                send_wasteland_logs(call, splited_data)
            else:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                      text=f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[call.from_user.id]["day"]}',
                                      reply_markup=get_bunker_keyboard(call.from_user.id))
        elif 'inventory' in call.data:
            send_inventory(call, wasteland_return_from_inventory, True, call.data.split('_')[2])
        elif 'wasteland_return_' in call.data:
            splited_data = call.data.split('_')
            if splited_data[2] == 'bunker':
                day = cur.execute(
                    """Select day from wasteland where chat_id={} and who='{}'""".format(chat_id,
                                                                                         splited_data[3])).fetchone()[0]
                cur.execute("""UPDATE wasteland SET is_return=1, day_return=? where chat_id=? and who=?""",
                            (day - 1, chat_id, splited_data[3]))
            else:
                day = 0
                cur.execute("""UPDATE wasteland SET is_return=0, day_return=? where chat_id=? and who=?""",
                            (day, chat_id, splited_data[3]))
            con.commit()
            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                  text='–õ—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏:',
                                  reply_markup=get_wasteland_mans_keyboard(call.from_user.id))
        elif 'family' in call.data:
            try:
                send_wasteland_logs(call, splited_data)
            except:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                      text=f'–õ—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏:',
                                      reply_markup=get_wasteland_mans_keyboard(call.from_user.id))
        elif 'page' in call.data:
            if 'prev' in call.data:
                if wasteland_page[call.from_user.id] - 1 >= 0:
                    wasteland_page[call.from_user.id] -= 1
                    send_wasteland_logs(call, splited_data)
            else:
                q = f"""Select text from wasteland where chat_id = {call.from_user.id} and who = '{splited_data[2]}'"""
                if len([x.replace('\n', '\n') for x in con.execute(q).fetchone()[0].split(';')]) > wasteland_page[call.from_user.id] * slice_page + slice_page:
                    wasteland_page[call.from_user.id] += 1
                    send_wasteland_logs(call, splited_data)


def return_who_data(who_data):
    who = ''
    if who_data == 'dad':
        who = '–ü–∞–ø–∞'
    if who_data == 'mother':
        who = '–ú–∞–º–∞'
    if who_data == 'sister':
        who = '–°–µ—Å—Ç—Ä–∞'
    if who_data == 'brother':
        who = '–ë—Ä–∞—Ç'
    return who


def send_wasteland_logs(call, splited_data):
    who_data = splited_data[2]
    who = return_who_data(who_data)
    q = f"""Select text from wasteland where chat_id = {call.from_user.id} and who = '{who_data}'"""
    n = wasteland_page[call.from_user.id] * slice_page
    logs = '\n'.join([x for x in con.execute(q).fetchone()[0].split(';')][n: n + slice_page])
    q = f"""Select is_return from wasteland where chat_id = {call.from_user.id} and who = '{who_data}'"""
    x = ''
    if con.execute(q).fetchone()[0]:
        q = f"""Select day_return from wasteland where chat_id = {call.from_user.id} and who = '{who_data}'"""
        x = f'–î–Ω–µ–π –¥–æ –≤–æ–∑–≤—Ä–∞—â–∞–Ω–∏—è: {con.execute(q).fetchone()[0] + 1}'
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                          text=f'{who} {a[call.from_user.id][who_data + "_bd"]["emoji"]}'
                               f'\n–ó–¥–æ—Ä–æ–≤—å–µ: {a[call.from_user.id][who_data + "_bd"]["hp"]}'
                               f'\n–°—ã—Ç–æ—Å—Ç—å: {a[call.from_user.id][who_data + "_bd"]["hungry"]}'
                               f'\n–ñ–∞–∂–¥–∞: {a[call.from_user.id][who_data + "_bd"]["water"]}'
                               f'\n–ò–º–º—É–Ω–∏—Ç–µ—Ç: {a[call.from_user.id][who_data + "_bd"]["immunity"]}'
                               f'\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {wasteland_page[call.from_user.id]}\n{logs}\n\n{x}',
                          reply_markup=get_wasteland_mans_keyboard(call.from_user.id, arrows=True, who_arrow=who_data))


def water_and_canned(call, name_):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='bunker_family_return'),
               types.InlineKeyboardButton(
                   text=f'{a[call.from_user.id]["inventory"].get("cannedfood", 0)} x –ö–æ–Ω—Å–µ—Ä–≤—ã + 50 —Å—ã—Ç–æ—Å—Ç–∏',
                   callback_data=f'bunker_food_cannedfood_{name_}'),
               types.InlineKeyboardButton(
                   text=f'{a[call.from_user.id]["inventory"].get("water", 0)} x –í–æ–¥–∞ + 50 –≤–æ–¥–∞',
                   callback_data=f'bunker_food_water_{name_}'))
    return markup


def bd_family(chat_id, data, who):
    if data:
        x = 0
        data = list(data)[1:]
        for i in a[chat_id][who + '_bd'].keys():
            a[chat_id][who + '_bd'][i] = data[x]
            x += 1


def event_run(message):
    events_bd = [x[0] for x in cur.execute("""Select event_id from events""").fetchall()]
    event = choice(events['choice'] + events['good'] + events['bad'] + events_bd)
    # event = choice(events_bd)
    markup = types.InlineKeyboardMarkup()
    package = set(list(a[message.chat.id]['inventory']))
    if [i for i in ['mother', 'dad', 'brother', 'sister'] if a[chat_id][i] != 0]:
        if event == '–ø–∞—É–∫–∏ –≤ –±—É–Ω–∫–µ—Ä–µ':
            if 'medicinechest' in package:
                markup.add(
                    types.InlineKeyboardButton(text='–∞–ø—Ç–µ—á–∫–∞', callback_data='event_spider_medicinechest'),
                    types.InlineKeyboardButton(text='–≤–æ–π–Ω–∞ —Å –ø–∞—É–∫–∞–º–∏', callback_data='event_spider_war')
                        )
                markup.add(types.InlineKeyboardButton(text='–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è', callback_data='event_spider_continue'))
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                 text='–≠—Ç–æ –±–µ–∑—É–º–∏–µ! –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –ø–∞—É–∫–æ–≤. –û–Ω–∏ –≤ –Ω–∞—à–µ–º '
                                 '—Å—É–ø–µ. –û–Ω–∏ –≤ –Ω–∞—à–µ–π –≤–æ–¥–µ. –ú—ã –∫–ª—è–Ω–µ–º—Å—è, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è, –∏ –æ–Ω–∏'
                                 ' —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª—å—à–µ —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º, –∫–æ–≥–¥–∞ –º—ã –∏—Ö –≤–∏–¥–∏–º! –¢–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—Ç. –ü—Ä–∏—à–ª–æ '
                                 '–≤—Ä–µ–º—è –≤–µ—Å—Ç–∏ –≤–æ–π–Ω—É —Å —ç—Ç–∏–º–∏ –ø–∞—É–∫–∞–º–∏!', reply_markup=markup)
            else:
                event_run(message)
        elif event == '–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞':
            markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='wasteland_return'))
            item = choice(['water', 'medicinechest', 'cannedfood', 'soap'])
            a[message.chat.id]['inventory'][item] = a[message.chat.id]['inventory'].get(item, 0) + 1
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f'–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–º–æ—â—å –æ—Ç –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {FOOD[item][0]}', reply_markup=markup)
        elif event == '–∫–æ–Ω—Å–µ—Ä–≤—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã':
            if 'cannedfood' in package:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='wasteland_return'))
                a[message.chat.id]['inventory']['cannedfood'] -= 1
                item_zero(message, 'cannedfood')
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text='–û–¥–Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞, –ø—Ä–∏—à–ª–æ—Å—å –µ–µ –≤—ã–∫–∏–Ω—É—Ç—å', reply_markup=markup)
            else:
                event_run(message)
        else:
            while True:
                q = """Select choiced from events where event_id={}""".format(event)
                if not cur.execute(q).fetchone()[0]:
                    break
                else:
                    event = choice(events_bd)
            bd_events(message.chat.id, event, message)



def item_zero(message, item):
    if a[message.chat.id]['inventory'][item] == 0:
        del a[message.chat.id]['inventory'][item]


def bunker(message):
    get_data_from_bd(message.chat.id)
    bot.send_message(message.chat.id, f'–õ–æ–∫–∞—Ü–∏—è: –ë—É–Ω–∫–µ—Ä\n–î–µ–Ω—å {a[message.chat.id]["day"]}',
                     reply_markup=get_bunker_keyboard(message.chat.id))


def bd_events(chat_id, event_id, message):
    tf = True
    who_tf = True
    whos = cur.execute("""Select who from events where event_id={}""".format(event_id)).fetchone()[0].split(';')
    for who in whos:
        if a[chat_id][who + '_bd']:
            who_tf = False
    if who_tf:
        res_items = a[chat_id]['inventory']
        if res_items:
            res_items, tf = event_items(event_id, res_items, tf, bd_name='events')
        if tf:
            markup = types.InlineKeyboardMarkup()
            butts = []
            event_butts = str(cur.execute("""Select butts from events where event_id={}""".format(event_id)).fetchone()[0]).split(';')
            for butt in event_butts:
                butts.append(types.InlineKeyboardButton(text=str(butt), callback_data=f'event_{event_id}_{butt}'))
            markup.add(*butts)
            text = cur.execute("""Select text from events where event_id={}""".format(event_id))
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                  text=text, reply_markup=markup)
        else:
            event_run(message)
    else:
        event_run(message)


def get_bunker_keyboard(chat_id):
    bunker = telebot.types.InlineKeyboardMarkup(row_width=5)
    butts = []
    if a[chat_id]['dad']:
        butts.append(telebot.types.InlineKeyboardButton(text=f'–ü–∞–ø–∞ {a[chat_id]["dad_bd"]["emoji"]}',
                                                        callback_data='bunker_family_dad'))
    if a[chat_id]['mother']:
        butts.append(telebot.types.InlineKeyboardButton(text=f'–ú–∞–º–∞ {a[chat_id]["mother_bd"]["emoji"]}',
                                                        callback_data='bunker_family_mother'))
    if a[chat_id]['brother']:
        butts.append(telebot.types.InlineKeyboardButton(text=f'–ë—Ä–∞—Ç {a[chat_id]["brother_bd"]["emoji"]}',
                                                        callback_data='bunker_family_brother'))
    if a[chat_id]['sister']:
        butts.append(telebot.types.InlineKeyboardButton(text=f'–°–µ—Å—Ç—Ä–∞ {a[chat_id]["sister_bd"]["emoji"]}',
                                                        callback_data='bunker_family_sister'))
    bunker.add(*butts)
    bunker.add(telebot.types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data='bunker_inventory'))
    bunker.add(telebot.types.InlineKeyboardButton(text='–ñ—É—Ä–Ω–∞–ª', callback_data='bunker_journal'),
               telebot.types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', callback_data='bunker_next_day'))
    bunker.add(telebot.types.InlineKeyboardButton(text='–ü—É—Å—Ç–æ—à—å', callback_data='bunker_wasteland'))

    return bunker


def get_wasteland_mans_keyboard(chat_id, arrows=False, who_arrow=''):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
    q = f"""Select who from wasteland where chat_id = {chat_id}"""
    who = con.execute(q).fetchall()
    butts = []
    keyboard.add(telebot.types.InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data='wasteland_return'))
    if arrows:
        keyboard.add(telebot.types.InlineKeyboardButton(text=f'–ü—Ä–µ–¥.–°—Ç—Ä', callback_data=f'wasteland_prev_{who_arrow}_page'),
                     telebot.types.InlineKeyboardButton(text=f'–°–ª–µ–¥.–°—Ç—Ä', callback_data=f'wasteland_next_{who_arrow}_page'))
    keyboard.add(telebot.types.InlineKeyboardButton(text=f'–°–ª–µ–¥.–î–µ–Ω—å', callback_data='bunker_next_day_wasteland'))
    for i in who:
        i = i[0]
        q = f"""Select is_return from wasteland where chat_id={chat_id} and who='{i}'"""
        who_wast = return_who_data(i)
        butts.append(telebot.types.InlineKeyboardButton(text=f'{who_wast} {a[chat_id][f"{i}_bd"]["emoji"]}',
                                                        callback_data=f'wasteland_family_{i}'))
        butts.append(telebot.types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å',
                                                        callback_data=f'wasteland_inventory_{i}'))
        if cur.execute(q).fetchone()[0]:
            butts.append(telebot.types.InlineKeyboardButton(text=f'–í–µ—Ä–Ω—É—Ç—å –≤ –ø—É—Å—Ç–æ—à—å',
                                                            callback_data=f'wasteland_return_wasteland_{i}'))
        else:
            butts.append(telebot.types.InlineKeyboardButton(text=f'–í–µ—Ä–Ω—É—Ç—å –≤ –±—É–Ω–∫–µ—Ä',
                                                            callback_data=f'wasteland_return_bunker_{i}'))

    keyboard.add(*butts)
    return keyboard


def add_wasteland_event(count, chat_id):
    who_list = cur.execute("""Select who from wasteland where chat_id={}""".format(chat_id)).fetchall()
    for who in who_list:
        who = who[0]
        event_list = [x[0] for x in cur.execute("""Select event_id from wasteland_events""").fetchall()]
        event_list = sample(choice_event_id(event_list), k=count)
        for event_id in event_list:
            wasteland_event_system(chat_id, who, cur.execute(
                """Select day from wasteland where chat_id={} and who='{}'""".format(chat_id, who)).fetchone()[
                0], event_id)
        cur.execute("""UPDATE wasteland SET day=? where chat_id=? and who=?""",
                    (cur.execute(
                        """Select day from wasteland where chat_id={} and who='{}'""".format(chat_id, who)).fetchone()[
                         0] + 1, chat_id, who))
        is_return = cur.execute(
            """Select is_return from wasteland where chat_id={} and who='{}'""".format(chat_id, who)).fetchone()[0]
        if is_return:
            day_return = \
                cur.execute("""Select day_return from wasteland where chat_id={} and who='{}'""".format(chat_id,
                                                                                                        who)).fetchone()[
                    0]
            if day_return > 0:
                cur.execute("""UPDATE wasteland SET day_return=? where chat_id=? and who=?""",
                            (day_return - 1, chat_id, who))
            else:
                a[chat_id][who] = 1
                b = cur.execute("""Select items from wasteland where chat_id={} and who='{}'""".format(chat_id, who)).fetchone()[
                    0].split(';')

                if len(b) != 0 and b[0].strip() != '':
                    for i in [x.split(':') for x in b]:
                        if i[0] in a[chat_id]['inventory'].keys():
                            n = int(i[1]) + int(a[chat_id]['inventory'][i[0]])
                            a[chat_id]['inventory'][i[0]] = int(n)
                        else:
                            a[chat_id]['inventory'][i[0]] = int(i[1])
                cur.execute("""Delete from wasteland where chat_id={} and who='{}'""".format(chat_id, who))
    con.commit()


def choice_event_id(event_list):
    res = []
    i = 0
    q = """Select not_choiced from wasteland_events where event_id={}"""
    n = len(event_list)
    while i != n:
        if len(event_list) != 0:
            x = choice(event_list)
            if cur.execute(q.format(x)).fetchone()[0] != 1:
                res.append(x)
                event_list.remove(x)
                i += 1
            else:
                event_list.remove(x)
        else:
            break
    return res


def wasteland_event_system(chat_id, who, day, event_id):
    who_items = cur.execute("""Select items from wasteland where chat_id={}""".format(chat_id)).fetchone()[0].split(';')
    res_items = {}
    if len(who_items) > 0 and who_items[0].strip() != '':
        for i in [x.split(':') for x in who_items]:
            res_items[i[0]] = int(i[1])
    tf = True
    if res_items:
        res_items, tf = event_items(event_id, res_items, tf)
    next_event_id = \
        cur.execute("""Select next_event_id from wasteland_events where event_id={}""".format(event_id)).fetchone()[0]
    if next_event_id and tf:
        if type(next_event_id) is type(int()):
            res_items, tf = next_event_items(res_items, next_event_id, tf)
        else:
            for next_event_i in next_event_id.split(';'):
                res_items, tf = next_event_items(res_items, next_event_i, tf)
                if tf is False:
                    break
    if tf:
        text = f'{cur.execute("""Select text from wasteland where who="{}" and chat_id={}""".format(who, chat_id)).fetchone()[0]}–î–µ–Ω—å {day}: {cur.execute("""Select text from wasteland_events where event_id={}""".format(event_id)).fetchone()[0]};'
        x = cur.execute("""Select hp, immunity from wasteland_events where event_id={}""".format(event_id)).fetchall()[0]
        who_weapon = cur.execute("""Select weapon from {} where chat_id={}""".format(who, chat_id)).fetchone()[0]
        need_weapon_damage = cur.execute(
            """Select need_weapon_damage from wasteland_events where event_id={}""".format(event_id)).fetchone()[0]
        if need_weapon_damage and who_weapon in WEAPON_DAMAGE.keys() and WEAPON_DAMAGE[who_weapon] >= int(need_weapon_damage):
            res_items = items_plus_and_minus(event_id, res_items)
        else:
            minus_char(chat_id, who, x)
            res_items = items_plus_and_minus(event_id, res_items)
        res_items = ';'.join([f'{x}:{res_items[x]}' for x in res_items.keys()])
        cur.execute("""UPDATE wasteland SET text=?, day=?, items=? where chat_id=? and who=?""", (text, day, res_items, chat_id, who))
        if next_event_id:
            if type(next_event_id) is type(int()):
                wasteland_event_system(chat_id, who, day, next_event_id)
            else:
                wasteland_event_system(chat_id, who, day, choice(next_event_id.split(';')))


def items_plus_and_minus(event_id, res_items, bd_name='wasteland_events', items_plus_tf=True, items_minus_tf=True):
    if items_plus_tf:
        items_plus = \
            cur.execute("""Select items_plus from {} where event_id={}""".format(bd_name, event_id)).fetchone()[0]
        if items_plus and items_plus[0].strip() != '':
            items_plus = items_plus.split(';')
            if len(items_plus) > 0 and items_plus[0].strip() != '':
                for i in [x.split(':') for x in items_plus]:
                    if i[0] in res_items.keys():
                        res_items[i[0]] = int(res_items[i[0]]) + int(i[1])
                    else:
                        res_items[i[0]] = int(i[1])
    if items_minus_tf:
        items_minus = \
            cur.execute("""Select items_minus from {} where event_id={}""".format(bd_name, event_id)).fetchone()[0]
        if items_minus and items_minus[0].strip() != '':
            items_minus = items_minus.split(';')
            if len(items_minus) > 0 and items_minus[0].strip() != '':
                for i in [x.split(':') for x in items_minus]:
                    if i[0] in res_items.keys():
                        if res_items[i[0]] - int(i[1]) > 0:
                            res_items[i[0]] = int(res_items[i[0]]) - int(i[1])
                        elif res_items[i[0]] - int(i[1]) == 0:
                            del res_items[i[0]]
    return res_items


def event_items(event_id, res_items, tf=True, bd_name='wasteland_events'):
    try:
        if tf:
            items_minus = \
                cur.execute("""Select items_minus from {} where event_id={}""".format(bd_name, event_id)).fetchone()
            print('minus', items_minus)
            if items_minus:
                if items_minus and items_minus[0] != '' and items_minus[0] is not None:
                    items_minus = items_minus[0].split(';')
                    if len(items_minus) > 0 and items_minus[0].strip() != '' and items_minus[0] != 'None':
                        for i in [x.split(':') for x in items_minus]:
                            if i[0] in res_items.keys():
                                if res_items[i[0]] - int(i[1]) < 0:
                                    tf = False
                                    break
                            else:
                                tf = False
                                break
        return res_items, tf
    except Exception as e:
        print('items_minus', event_id, res_items, bd_name, e)
        return res_items, False


def next_event_items(res_items, event_id, tf, bd_name='wasteland_events'):
    res_items, tf = event_items(event_id, res_items, tf)
    if tf:
        next_event_id = \
            cur.execute("""Select next_event_id from {} where event_id={}""".format(bd_name, event_id)).fetchone()
        if next_event_id and next_event_id[0] and str(next_event_id).strip() != '' and next_event_id != 'None':
            if type(next_event_id[0]) is type(int()):
                res_items, tf = next_event_items(res_items, next_event_id[0], tf)
            else:
                next_event_id = next_event_id[0].split(';')
                for next_event_i in next_event_id:
                    res_items, tf = next_event_items(res_items, next_event_i, tf)
                    if tf is False:
                        break
    return res_items, tf


def update_family_bd(chat_id, who):
    q = """UPDATE {} SET hp = {}, hungry = {}, immunity = {}, emoji = "{}", water = {}, weapon= "{}" WHERE chat_id == {}"""
    cur.execute(q.format(who, a[chat_id][who + '_bd']['hp'], a[chat_id][who + '_bd']['hungry'],
                         a[chat_id][who + '_bd']['immunity'], a[chat_id][who + '_bd']['emoji'],
                         a[chat_id][who + '_bd']['water'], a[chat_id][who + '_bd']['weapon'], chat_id))


def create_family_bd(chat_id):
    if chat_id in [int(x[0]) for x in cur.execute("""Select chat_id from dad""").fetchall()] or \
            chat_id in [int(x[0]) for x in cur.execute("""Select chat_id from mother""").fetchall()] or \
            chat_id in [int(x[0]) for x in cur.execute("""Select chat_id from brother""").fetchall()] or \
            chat_id in [int(x[0]) for x in cur.execute("""Select chat_id from sister""").fetchall()]:
        if a[chat_id]['dad']:
            update_family_bd(chat_id, 'dad')
        if a[chat_id]['mother']:
            update_family_bd(chat_id, 'mother')
        if a[chat_id]['brother']:
            update_family_bd(chat_id, 'brother')
        if a[chat_id]['sister']:
            update_family_bd(chat_id, 'sister')
    else:
        if a[chat_id]['dad']:
            insert_bd_family(chat_id, 'dad')
        if a[chat_id]['mother']:
            insert_bd_family(chat_id, 'mother')
        if a[chat_id]['brother']:
            insert_bd_family(chat_id, 'brother')
        if a[chat_id]['sister']:
            insert_bd_family(chat_id, 'sister')
    con.commit()


def insert_bd_family(chat_id, who):
    q = """INSERT INTO {} VALUES (?, ?, ?, ?, ?, ?, ?)""".format(who)
    cur.execute(q,
                (chat_id, a[chat_id][who + '_bd']['hp'], a[chat_id][who + '_bd']['hungry'],
                 a[chat_id][who + '_bd']['water'], a[chat_id][who + '_bd']['immunity'],
                 a[chat_id][who + '_bd']['emoji'], a[chat_id][who + '_bd']['weapon']))


def get_data_from_bd(chat_id):
    if chat_id not in a.keys():
        a[chat_id] = a[0]
    q = """Select {} from {} where chat_id = {}"""
    bd_family(chat_id, cur.execute(q.format('*', 'dad', chat_id)).fetchone(), 'dad')
    bd_family(chat_id, cur.execute(q.format('*', 'mother', chat_id)).fetchone(), 'mother')
    bd_family(chat_id, cur.execute(q.format('*', 'brother', chat_id)).fetchone(), 'brother')
    bd_family(chat_id, cur.execute(q.format('*', 'sister', chat_id)).fetchone(), 'sister')
    inv = {}
    b = cur.execute(q.format('inventory', 'saves', chat_id)).fetchone()[0].split(';')
    if len(b) > 0 and b[0] != '':
        for i in [x.split(':') for x in b]:
            inv[i[0]] = int(i[1])
        a[chat_id]['inventory'] = inv
    a[chat_id]['name'] = cur.execute(q.format('name', 'saves', chat_id)).fetchone()[0]
    a[chat_id]['mother'] = cur.execute(q.format('mother', 'saves', chat_id)).fetchone()[0]
    a[chat_id]['dad'] = cur.execute(q.format('dad', 'saves', chat_id)).fetchone()[0]
    a[chat_id]['brother'] = cur.execute(q.format('brother', 'saves', chat_id)).fetchone()[0]
    a[chat_id]['sister'] = cur.execute(q.format('sister', 'saves', chat_id)).fetchone()[0]
    a[chat_id]['day'] = cur.execute(q.format('day', 'saves', chat_id)).fetchone()[0]


def edit_message_for_family(call, who=None):
    if who is None:
        who = ''
        if call.data[len('bunker_family_'):] == 'dad':
            who = '–ü–∞–ø–∞'
        elif call.data[len('bunker_family_'):] == 'mother':
            who = '–ú–∞–º–∞'
        elif call.data[len('bunker_family_'):] == 'sister':
            who = '–°–µ—Å—Ç—Ä–∞'
        elif call.data[len('bunker_family_'):] == 'brother':
            who = '–ë—Ä–∞—Ç'
        who_bd = call.data[len('bunker_family_'):] + '_bd'
    else:
        who_bd = who + '_bd'
        who = return_who_data(who)
    family_menu = telebot.types.InlineKeyboardMarkup()
    family_menu.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='bunker_family_return'))
    family_menu.add(telebot.types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—É—Å—Ç–æ—à—å',
                                                       callback_data=f"wasteland_{call.data[len('bunker_family_'):]}_go"))
    family_menu.add(telebot.types.InlineKeyboardButton(text='–ö–æ—Ä–º–∏—Ç—å', callback_data='bunker_family_feed'))
    family_menu.add(telebot.types.InlineKeyboardButton(text='–í–æ–æ—Ä—É–∂–µ–Ω–∏–µ', callback_data=f'bunker_family_weapon_{call.data[len("bunker_family_"):]}'))
    if a[call.from_user.id][who_bd]["weapon"]:
        weapon = things[a[call.from_user.id][who_bd]["weapon"]][0] + ' ‚öî' + str(WEAPON_DAMAGE[a[call.from_user.id][who_bd]["weapon"]])
    else:
        weapon = '–Ω–∏—á–µ–≥–æ'
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                          text=f'{who} {a[call.from_user.id][who_bd]["emoji"]}'
                               f'\n–ó–¥–æ—Ä–æ–≤—å–µ: {a[call.from_user.id][who_bd]["hp"]}'
                               f'\n–°—ã—Ç–æ—Å—Ç—å: {a[call.from_user.id][who_bd]["hungry"]}'
                               f'\n–ñ–∞–∂–¥–∞: {a[call.from_user.id][who_bd]["water"]}'
                               f'\n–ò–º–º—É–Ω–∏—Ç–µ—Ç: {a[call.from_user.id][who_bd]["immunity"]}'
                               f'\n–í–æ–æ—Ä—É–∂–µ–Ω–∏–µ: {weapon}',
                          reply_markup=family_menu)


def save_update_to_bd(chat_id):
    if chat_id in [int(x[0]) for x in cur.execute("""Select chat_id from saves""").fetchall()]:
        inventory = ';'.join([f'{x}:{a[chat_id]["inventory"][x]}' for x in a[chat_id]['inventory'].keys()])
        cur.execute(
            """UPDATE saves SET chat_id = ?, inventory = ?, name = ?, mother = ?, dad = ?, brother = ?, sister = ?, day = ? WHERE chat_id = ?""",
            (chat_id, inventory, a[chat_id]['name'], a[chat_id]['mother'], a[chat_id]['dad'],
             a[chat_id]['brother'], a[chat_id]['sister'], a[chat_id]['day'], chat_id))
    else:
        a[chat_id]['dad'] = 0
        a[chat_id]['sister'] = 0
        a[chat_id]['brother'] = 0
        a[chat_id]['mother'] = 0
        if family.get(chat_id, False):
            if '–ü–∞–ø–∞' in family[chat_id]:
                a[chat_id]['dad'] = 1
            if '–°–µ—Å—Ç—Ä–∞' in family[chat_id]:
                a[chat_id]['sister'] = 1
            if '–ë—Ä–∞—Ç' in family[chat_id]:
                a[chat_id]['brother'] = 1
            if '–ú–∞–º–∞' in family[chat_id]:
                a[chat_id]['mother'] = 1
            del family[chat_id]
        inventory = ';'.join([f'{x}:{a[chat_id]["inventory"][x]}' for x in a[chat_id]['inventory'].keys()])
        cur.execute("""INSERT INTO saves VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                    (chat_id, inventory, a[chat_id]['name'], a[chat_id]['mother'], a[chat_id]['dad'],
                     a[chat_id]['brother'], a[chat_id]['sister'], a[chat_id]['day']))
    create_family_bd(chat_id)
    con.commit()


def items_how_many_things_are_left(chat_id, item):
    return FOOD[item][3] - package.get(chat_id, {}).get(FOOD[item][1], 0)


def items(chat_id):
    markup = types.InlineKeyboardMarkup()
    item_1 = types.InlineKeyboardButton(text='', callback_data='item_')
    markup.add(types.InlineKeyboardButton(text='–ë–µ–∂–∏–∏–∏–º!!!!!', callback_data='run'))
    family_button = {'dad': types.InlineKeyboardButton(
        text=f'{items_how_many_things_are_left(chat_id, "dad")} x –ü–∞–ø–∞ - 15',
        callback_data='item_dad'),
        'mother': types.InlineKeyboardButton(
            text=f'{items_how_many_things_are_left(chat_id, "mother")} x –ú–∞–º–∞ - 15',
            callback_data='item_mother'),
        'brother': types.InlineKeyboardButton(
            text=f'{items_how_many_things_are_left(chat_id, "brother")} x –°—ã–Ω - 15',
            callback_data='item_brother'),
        'sister': types.InlineKeyboardButton
        (text=f'{items_how_many_things_are_left(chat_id, "sister")} x –î–æ—á—å - 15',
         callback_data='item_sister'), }
    item_button = [types.InlineKeyboardButton(
            text=f'{items_how_many_things_are_left(chat_id, key)} x {value[0]} - {value[2]}',
            callback_data=f'item_{key}')
        for key, value in FOOD.items() if package.get(chat_id, {}).get(value[1], 0) != value[3]
                                          and value[1] not in family_button.keys()]
    button = [family_button[i] for i in
              filter(lambda x: FOOD[x][0] not in family.get(chat_id, []), family_button)] + \
              item_button
    for i in range(0, len(button), 2):
        markup.add(*button[i:i + 2])
    return markup


def car(message):
    text = ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
            'üöóüí®']
    run = bot.send_message(message.chat.id, '_______________üöóüí®')
    for i in range(1, len(text)):
        time.sleep(0.1)
        bot.edit_message_text(chat_id=run.chat.id, message_id=run.message_id,
                              text=''.join(text))
        text[- i - 1], text[- i] = text[- i], text[- i - 1]
    bot.edit_message_text(chat_id=run.chat.id, message_id=run.message_id,
                          text='üöó________________')


def time_cheker(call, chat_id):
    second = 60
    sms = bot.send_message(call.message.chat.id, '–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} {} –∏ {} –º–µ—Å—Ç–∞ –≤ –±—É–Ω–∫–µ—Ä–µ'.format(
        second, morph('—Å–µ–∫—É–Ω–¥–∞')[0].make_agree_with_number(second).word, weight_list[chat_id]),
                           reply_markup=items(chat_id))
    while second > 0:
        time.sleep(1)
        second -= 1
        bot.edit_message_text(chat_id=sms.chat.id, message_id=sms.message_id,
                              text='–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} {}  –∏ {} –º–µ—Å—Ç–∞ –≤ –±—É–Ω–∫–µ—Ä–µ\n–ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –º–∏–Ω–∏–º—É–º 1 —á–ª–µ–Ω–∞ —Å–µ–º—å–∏'.format(
                                  second, morph('—Å–µ–∫—É–Ω–¥–∞')[0].make_agree_with_number(second).word,
                                  weight_list[chat_id]), reply_markup=items(chat_id))
        if weight_list[chat_id] < 1 or second == 0:
            if package.get(chat_id, False):
                bot.send_message(call.message.chat.id, '–í–æ—Ç —á—Ç–æ –≤—ã –≤–∑—è–ª–∏ —Å —Å–æ–±–æ–π:\n' +
                                 '\n'.join(
                                     '{}. {} x {}'.format(i + 1, FOOD[item[0]][0], item[1]) for i, item in
                                     enumerate(package[chat_id].items())))
            else:
                bot.send_message(call.message.chat.id,
                                 '–í—ã –Ω–∏—á–µ–≥–æ —Å —Å–æ–±–æ–π –Ω–µ –≤–∑—è–ª–∏, –¥–∞ —Ç—ã —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–π —á–µ–ª')
            bot.send_message(call.message.chat.id, '–ò–∑ —Å–µ–º—å–∏ –≤—ã –≤–∑—è–ª–∏:\n' + '\n'.join(
                '{}. {}'.format(i + 1, item) for i, item in
                enumerate(family.get(chat_id, ['–ù–∏–∫–æ–≥–æ, –Ω–æ –∫–∞–∫ –∂–µ —Ç–∞–∫?)']))))
            bot.edit_message_text(chat_id=sms.chat.id, message_id=sms.message_id,
                                  text='–í—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å' if second == 0 else '–ú–µ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å')
            markup = types.ReplyKeyboardMarkup(True)
            markup.add(
                types.InlineKeyboardButton('–î–æ–Ω–∞—Ç'),
                types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
                types.InlineKeyboardButton('–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º')
            )
            bot.send_message(call.message.chat.id, '–ü–æ—Ä–∞ –≤ –±—É–Ω–∫–µ—Ä', reply_markup=markup)

            a[call.from_user.id] = a[0]
            if len(package.keys()) != 0:
                a[call.from_user.id]['inventory'] = package[chat_id]
            save_update_to_bd(call.from_user.id)
            for i in (package, weight_list):
                if chat_id in i:
                    del i[chat_id]
            # car(call.message)
            bunker(call.message)
            return


@bot.message_handler(commands=['start', 'new_game'])
def start_message(message):
    if message.text == '/start':
        if message.from_user.username not in user_list:
            laste_name = message.from_user.last_name
            if not laste_name:
                laste_name = ''
            name = message.from_user.first_name + ' ' + laste_name
            murkup = types.InlineKeyboardMarkup(row_width=2)
            item_1 = types.InlineKeyboardButton('–î–∞', callback_data='play_yes')
            item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='play_no')
            murkup.add(item_1, item_2)
            if message.chat.id not in a.keys():
                a[message.chat.id] = a[0]
            a[message.chat.id]['name'] = name.strip()
            bot.send_message(message.chat.id, '{}, —Ç—ã –≤—ã–∂–∏–ª?\n–†–µ—à–∏—à—å—Å—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É?'.format(name),
                             reply_markup=murkup)
            user_list.append(message.from_user.username)
            print("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", user_list)
        else:
            bot.delete_message(message.chat.id, message.message_id)
    elif message.text == '/new_game':
        murkup = types.InlineKeyboardMarkup(row_width=2)
        item_1 = types.InlineKeyboardButton('–î–∞', callback_data='play_start')
        item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='play_continue')
        murkup.add(item_1, item_2)
        bot.send_message(message.chat.id, '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞?',
                         reply_markup=murkup)


good = types.InlineKeyboardMarkup()
good.add(types.InlineKeyboardButton(text='–•–æ—Ä–æ—à–æ', callback_data='bunker_family_return'))


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text.lower() == '1':
        bunker(message)
    elif message.text == '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º':
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                              text='–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start, —Ç–∞–∫–∏—Å –æ–±—Ä–∞–∑–æ–º –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É. '
                                   '–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—ã –ø—Ä—è—á–µ—Ç–µ—Å—å –≤ –±—É–Ω–∫–µ—Ä, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ –≤—Å–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞–º –≤ –≤—ã–∂–∏–≤–∞–Ω–∏–∏ –≤ –±—É–Ω–∫–µ—Ä–µ.\n'
                                   '–í –±—É–Ω–∫–µ—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∑—è—Ç–æ–º—É —á–ª–µ–Ω—É —Å–µ–º—å–∏, –Ω–∞–∂–∞–≤ –ø–æ —á–ª–µ–Ω—É —Å–µ–º—å–∏.'
                                   '–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤—ã —É–≤–∏–¥–µ—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—É–Ω–∫–µ—Ä–∞.'
                                   '–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ –∂—É—Ä–Ω–∞–ª, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–≤–µ–Ω—Ç –¥–ª—è –±—É–Ω–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –¥–∞—Ç—å –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å.'
                                   '–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥.–¥–µ–Ω—å.'
                                   '–ù–µ–æ—Ç–ª–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –∏–≥—Ä—ã —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ—à—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
                                   '–≤–µ—â–∏ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –≤ –ø—É—Å—Ç–æ—à—å. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –Ω–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ –∏ –Ω–∞–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—É—Å—Ç–æ—à—å, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫, –≤–µ–¥—å –æ–Ω –∏–ª–∏ –æ–Ω–∞ –º–æ–∂–µ—Ç —É–º–µ—Ä–µ—Ç—å, —Ç–∞–∫ —á—Ç–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ —É–±–∏—Ç—å –≤—Å–µ—Ö)'
                                   '–û—Ç–ø—Ä–∞–≤–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø—É—Å—Ç–æ—à—å –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—É—Å—Ç–æ—à–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –ø—É—Å—Ç–æ—à—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –≤–∞—à–∏ –ª—é–¥–∏ –≤ –ø—É—Å—Ç–æ—à–∏, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –í—ã –∑–∞–º–µ—Ç–∏—Ç–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–∏—Ö –≤—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–≤–µ–Ω—Ç—ã –ø—É—Å—Ç–æ—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ —Å –≤–∞—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–∞.'
                                   '–†—è–¥–æ–º —Å —á–µ–ª–æ–≤–µ–∫–æ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É–≤–∏–¥–µ—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±—É–Ω–∫–µ—Ä, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–í–µ—Ä–Ω—É—Ç—å –≤ –±—É–Ω–∫–µ—Ä", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—É—Å—Ç–æ—à—å, —Ç–æ "–í–µ—Ä–Ω—É—Ç—å –≤ –ø—É—Å—Ç–æ—à—å"',
                              reply_markup=good)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global weight_list
    chat_id = call.message.chat.id
    name = call.data
    name_type = name.split('_')[0]
    if name_type == 'play':
        type = name.split('_')[1]
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        if type == 'yes':
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–°–ø—Ä—è—Ç–∞—Ç—å—Å—è', callback_data='play_start'))
            bot.send_message(call.message.chat.id,
                             '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –≤—ã–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ, –∫–æ—Ç–æ—Ä–æ–º—É –≥—Ä–æ–∑–∏—Ç –ø–∞–Ω–¥–µ–º–∏—è, –≤—ã —Ä–µ—à–∞–µ—Ç–µ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ –±—É–Ω–∫–µ—Ä–µ, —É —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤–µ—â–∏ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏–µ–¥–µ—Ç –ø–æ–ª–∏—Ü–∏—è –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ',
                             reply_markup=markup)
        elif type == 'no':
            murkup = types.InlineKeyboardMarkup(row_width=2)
            item_1 = types.InlineKeyboardButton('–î–∞', callback_data='play_yes')
            item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='play_no')
            murkup.add(item_1, item_2)
            bot.send_message(call.message.chat.id, '–°—ã–∫–∞–Ω—É–ª, –º–æ–∂–µ—Ç –≤—Å–µ —Ç–∞–∫–∏ —Å—ã–≥—Ä–∞–µ—à—å?',
                             reply_markup=murkup)
        elif type == 'start':
            if chat_id not in weight_list:
                cur.execute("""Delete from wasteland where chat_id={}""".format(chat_id))
                cur.execute("""Delete from brother where chat_id={}""".format(chat_id))
                cur.execute("""Delete from dad where chat_id={}""".format(chat_id))
                cur.execute("""Delete from mother where chat_id={}""".format(chat_id))
                cur.execute("""Delete from saves where chat_id={}""".format(chat_id))
                cur.execute("""Delete from sister where chat_id={}""".format(chat_id))
                print('–°—á–µ—Ç—á–∏–∫: ' + call.from_user.username)
                weight_list[chat_id] = 100
                thread1 = Thread(target=time_cheker, args=(call, chat_id))
                thread1.start()
                time_list[chat_id] = thread1
        elif type == 'continue':
            pass
    elif name_type == 'item':
        item = FOOD[name.split('_')[1]]
        item_weight = item[2]
        item_name = item[0]
        if weight_list[chat_id] != 0:
            if weight_list[chat_id] - item_weight < 0:
                bot.answer_callback_query(callback_query_id=call.id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞')
            else:
                text = '–ú—ã –ø–æ–ª–æ–∂–∏–ª–∏ –≤ —Å—É–º–∫—É: {}'
                if item[1] in ['mother', 'dad', 'brother', 'sister']:
                    if item_name not in family.get(chat_id, []):
                        text = '–í—ã –≤–∑—è–ª–∏ —Å —Å–æ–±–æ–π –≤ –±—É–Ω–∫–µ—Ä: {}'
                        family[chat_id] = family.get(chat_id, []) + [item_name]
                        bot.answer_callback_query(callback_query_id=call.id, text=text.format(
                            morph(item_name)[0].inflect({'accs'}).word))
                        weight_list[chat_id] -= item_weight
                    else:
                        bot.answer_callback_query(callback_query_id=call.id,
                                                  text='–í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç–æ–≥–æ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏')
                else:
                    package[chat_id] = package.get(chat_id, {})
                    if package[chat_id].get(item[1], 0) != item[3]:
                        package[chat_id][item[1]] = package[chat_id].get(item[1], 0) + 1
                        weight_list[chat_id] -= item_weight
                        bot.answer_callback_query(callback_query_id=call.id,
                                                  text=text.format(
                                                      morph(item_name)[0].inflect({'accs'}).word))
    elif name_type == 'run':
        print(chat_id, '—É–±–µ–∂–∞–ª')
        weight_list[chat_id] = 0


chat_ids = [int(x[0]) for x in cur.execute("""Select chat_id from saves""").fetchall()]
if chat_ids:
    for chat_id in chat_ids:
        wasteland_page[chat_id] = 0
        get_data_from_bd(chat_id)


bot.polling()
